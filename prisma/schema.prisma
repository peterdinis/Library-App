generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Role {
  TEACHER
  STUDENT
  ADMIN
}

enum BorrowedStatus {
  NOTHING
  BORROWED
  RETURNED
  NOT_RETURNED
}

model User {
  id               String     @id @unique @default(uuid())
  fullName         String
  email            String     @unique
  password         String
  status           Status     @default(PENDING)
  role             Role       @default(TEACHER)
  accountDeleted   Boolean?    @default(false)
  lastActivityDate DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt()
  bookings         Booking[] 
}

model Genre {
  id    String @id @unique @default(uuid())
  name  String @unique
  books Book[]
}

model Category {
  id    String @id @unique @default(uuid())
  name  String @unique
  books Book[]
}

model Author {
  id    String  @id @unique @default(uuid())
  name  String  @unique
  bio   String?
  books Book[]
}

model Book {
  id              String     @id @unique @default(uuid())
  title           String
  rating          Int
  coverUrl        String
  description     String
  isAvaible       Boolean    @default(false)
  totalCopies     Int        @default(1)
  availableCopies Int        @default(0)
  summary         String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt()
  bookings        Booking[]  

  genreId   String
  genre     Genre    @relation(fields: [genreId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  authorId   String
  author     Author   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String          @id @unique @default(uuid())
  userId     String
  bookId     String
  borrowDate DateTime        @default(now())
  dueDate    DateTime
  className  String
  returnDate DateTime?
  status     BorrowedStatus  @default(BORROWED)
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt()
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  book       Book            @relation(fields: [bookId], references: [id], onDelete: Cascade)
}